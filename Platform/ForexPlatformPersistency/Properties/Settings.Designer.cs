//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace ForexPlatformPersistence.Properties {
    
    
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGenerator", "15.8.0.0")]
    public sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        private static Settings defaultInstance = ((Settings)(global::System.Configuration.ApplicationSettingsBase.Synchronized(new Settings())));
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute(@"CREATE TABLE [Platforms] (
    [Id] integer PRIMARY KEY AUTOINCREMENT NOT NULL,
    [Name] text NOT NULL,
    [Guid] guid NOT NULL,
    [Data] blob
);

CREATE TABLE [PlatformComponents] (
    [Id] integer PRIMARY KEY AUTOINCREMENT NOT NULL,
    [PlatformId] integer NOT NULL,
    [Type] text NOT NULL,
    [Data] blob,
    [Loaded] bool NOT NULL DEFAULT True
);")]
        public string PlatformDBSchema {
            get {
                return ((string)(this["PlatformDBSchema"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute(@"CREATE TABLE [DataStoreEntries] (
    [Id] integer PRIMARY KEY NOT NULL,
    [Symbol] blob NOT NULL,
    [Copyright] text,
    [Description] text,
    [Period] text NOT NULL,
    [FileName] text,
    [StartTime] datetime NOT NULL,
    [EndTime] datetime NOT NULL,
    [QuoteCount] int NOT NULL,
    [DecimalDigits] int NOT NULL,
    [Guid] guid NOT NULL
);")]
        public string DataStoreDBSchema {
            get {
                return ((string)(this["DataStoreDBSchema"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute(@"CREATE TABLE [Events] (
    [Id] integer PRIMARY KEY AUTOINCREMENT NOT NULL,
    [Type] string NOT NULL,
    [EventId] text,
    [SourceId] integer NOT NULL,
    [ChannelId] string DEFAULT 0,
    [Author] text,
    [Title] text,
    [Description] text,
    [Link] text,
    [DateTime] datetime,
    [EndDateTime] datetime,
    [IsRead] bit,
    [IsVisible] bit,
    [IsFavourite] bit,
    [XmlBlob] text
);

CREATE TABLE ""EventSources"" (
    [Id] integer PRIMARY KEY AUTOINCREMENT NOT NULL,
    [Enabled] bit NOT NULL DEFAULT True,
    [Name] text NOT NULL,
    [Data] blob,
    [Address] text,
    [Description] text,
    [Icon] blob,
    [Type] text
);

CREATE TABLE [ForexNewsItems] (
    [Id] integer PRIMARY KEY AUTOINCREMENT NOT NULL,
    [NewsSourceId] integer NOT NULL,
    [Title] text,
    [Currency] text NOT NULL,
    [ChannelId] int NOT NULL DEFAULT 0,
    [Impact] int NOT NULL,
    [DateTime] datetime,
    [TimeSpan] text
);")]
        public string EventsDBSchema {
            get {
                return ((string)(this["EventsDBSchema"]));
            }
        }
    }
}
